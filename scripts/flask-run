#!/usr/bin/env python
"""Serve up a flask app"""

import argparse
import sys
import os

def import_app(module):
    """Shamelessly stolen from gunicorn's apploader"""
    parts = module.split(":", 1)
    if len(parts) == 1:
        module, obj = module, "app"
    else:
        module, obj = parts[0], parts[1]

    try:
        __import__(module)
    except ImportError:
        if module.endswith(".py") and os.path.exists(module):
            raise ImportError("Failed to find application, did "
                "you mean '%s:%s'?" % (module.rsplit(".",1)[0], obj))
        else:
            raise
    mod = sys.modules[module]
    app = eval(obj, mod.__dict__)
    if app is None:
        raise ImportError("Failed to find application object: %r" % obj)
    if not callable(app):
        raise TypeError("Application object must be callable.")
    return app

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = parseargs(argv)
    app = import_app(args.appmodule)
    if args.debug:
        import logging
        app.logger.setLevel(logging.DEBUG)
    app.run(host=args.host, port=args.port, debug=args.debug)

def parseargs(args):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--host', action='store', dest='host', help='Bind to this host. 0.0.0.0 for all', default='127.0.0.1')
    parser.add_argument('--port', '-p', action='store', dest='port', help='Bind to this port', type=int, default=5000)
    parser.add_argument('--debug', action='store_true', help='Enable flask debugger', default=True)
    parser.add_argument('appmodule', action='store', metavar='MODULE:OBJ', help='module and wsgi app in format - module:obj')
    args = parser.parse_args(args=args)
    return args

if __name__ == '__main__':
    sys.exit(main())
