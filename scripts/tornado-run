#!/usr/bin/env python
"""Serve up a WSGI application with tornado"""

import argparse
import sys
import os
from os import path
from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop

CERTPATH = path.join(path.expanduser('~jsweeney'), 'certificates')
default_ssl_options = {
    'certfile': path.join(CERTPATH, 'jsweeney.crt'),
    'keyfile' : path.join(CERTPATH, 'jsweeney.key')
}

def import_app(module):
    """Stolen shamelessly from gunicorn's apploader"""
    parts = module.split(":", 1)
    if len(parts) == 1:
        module, obj = module, "application"
    else:
        module, obj = parts[0], parts[1]

    try:
        __import__(module)
    except ImportError:
        if module.endswith(".py") and os.path.exists(module):
            raise ImportError("Failed to find application, did "
                "you mean '%s:%s'?" % (module.rsplit(".",1)[0], obj))
        else:
            raise

    mod = sys.modules[module]
    app = eval(obj, mod.__dict__)
    if app is None:
        raise ImportError("Failed to find application object: %r" % obj)
    if not callable(app):
        raise TypeError("Application object must be callable.")
    return app


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    args = parseargs(argv)
    http_server = HTTPServer(WSGIContainer(import_app(args.appmodule)), ssl_options=args.ssl_options)
    print >> sys.stderr, "Starting poster on HTTP%s port: %i" % ('S' if args.ssl else '', args.port)
    http_server.listen(args.port)
    IOLoop.instance().start()

def parseargs(args):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--ssl', '-s', action='store_true', dest='ssl', help='use SSL')
    parser.add_argument('--cert', '-c', action='store', dest='certfile', help='SSL certificate', type=argparse.FileType('rt'))
    parser.add_argument('--key', '-k', action='store', dest='keyfile', help='SSL private key', type=argparse.FileType('rt'))
    parser.add_argument('--port', '-p', action='store', dest='port', help='Bind to this port', type=int, default=5555)
    parser.add_argument('appmodule', action='store', metavar='MODULE:OBJ', help='module and wsgi app in format - module:obj')
    args = parser.parse_args(args=args)
    args.ssl_options = None
    if args.ssl:
        args.ssl_options = dict(default_ssl_options)
        for argname in ('certfile', 'keyfile'):
            filehandle = getattr(args, argname)
            if filehandle:
                 setattr(args, argname, filehandle.name)
                 filehandle.close()
                 args.ssl_options[argname] = getattr(args, argname)
    return args

if __name__ == '__main__':
    sys.exit(main())
