#!/usr/bin/env python
"""Serve up a WSGI application with tornado"""

import argparse
import inspect
import signal
import sys
import os
from termcolor import colored
from os import path
from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
import tornado.options
import logging

log = logging.getLogger()
DEBUG = False
_default_log_level = logging.INFO

CERTPATH = path.join(path.expanduser('~'), 'certificates')
default_ssl_options = {
    'certfile': path.join(CERTPATH, 'app.crt'),
    'keyfile' : path.join(CERTPATH, 'app.key')
}

def import_app(module):
    """Stolen shamelessly from gunicorn's apploader"""
    parts = module.split(":", 1)
    if len(parts) == 1:
        module, obj = module, "app"
    else:
        module, obj = parts[0], parts[1]

    try:
        __import__(module)
    except ImportError:
        if module.endswith(".py") and os.path.exists(module):
            raise ImportError("Failed to find application, did "
                "you mean '%s:%s'?" % (module.rsplit(".",1)[0], obj))
        else:
            raise

    mod = sys.modules[module]
    app = eval(obj, mod.__dict__)
    if app is None:
        raise ImportError("Failed to find application object: %r" % obj)
    if not callable(app):
        raise TypeError("Application object must be callable.")
    return app

def chgrp(group):
    import grp
    try:
        gid = grp.getgrnam(group).gr_gid
    except KeyError:
        raise KeyError('%s not a valid group' % group)
    os.setgid(gid)

def chuser(user):
    import pwd
    try:
        uid = pwd.getpwnam(user).pw_uid
    except KeyError:
        raise KeyError('%s not a valid user' % user)
    os.setuid(uid)

def unset_debug():
    log.setLevel(_default_log_level)

def set_debug():
    log.setLevel(logging.DEBUG)

def printsource(frame):
    try:
        tb =  inspect.getframeinfo(frame, context=5)
        for n, line in enumerate(tb.code_context):
            line = colored(line, 'green') if n == tb.index else line
            sys.stdout.write(line)
    except:
        log.warning("Cound't print source code")

def debug_signal(sig, frame):
    global DEBUG
    log.info("DEBUG Mode %s", 'off' if DEBUG else 'on')
    printsource(frame) 
    if DEBUG:
        unset_debug()
    else:
        set_debug()
    DEBUG = not DEBUG


def main(argv=None):
    global _default_log_level
    if argv is None:
        argv = sys.argv[1:]
    args = parseargs(argv)
    tornado.options.parse_command_line() # this sets up logging from tornado's config
    if args.log:
        numeric_level = getattr(logging, args.log.upper(), None)
        if not isinstance(numeric_level, int):
            raise ValueError('Invalid log level: %s' % args.log)
        log.setLevel(numeric_level)
    if args.ssl:
        log.info('Using SSL keyfile:%(keyfile)s certfile:%(certfile)s' % args.ssl_options)
    _default_log_level = log.level
    http_server = HTTPServer(WSGIContainer(import_app(args.appmodule)), ssl_options=args.ssl_options)
    log.info("Starting HTTP%s server on: %s:%i" % ('S' if args.ssl else '', args.host, args.port)) 
    http_server.listen(args.port)
    signal.signal(signal.SIGUSR1, debug_signal)
    if args.group:
        chgrp(args.group)
    if args.user: 
        chuser(args.user)
    IOLoop.instance().start()

def parseargs(args):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--ssl', '-s', action='store_true', dest='ssl', help='use SSL')
    parser.add_argument('--cert', '-c', action='store', dest='certfile', help='SSL certificate', type=argparse.FileType('rt'))
    parser.add_argument('--key', '-k', action='store', dest='keyfile', help='SSL private key', type=argparse.FileType('rt'))
    parser.add_argument('--host', action='store', dest='host', help='Bind to this host. 0.0.0.0 for all', default='0.0.0.0')
    parser.add_argument('--port', '-p', action='store', dest='port', help='Bind to this port', type=int, default=5555)
    parser.add_argument('--user', '-u', action='store', dest='user', help='Run as this user (setuid)')
    parser.add_argument('--group', '-g', action='store', dest='group', help='Run as this group (setgid)')
    parser.add_argument('--log', '-l', action='store', dest='log', choices='notset debug info warning error critical'.split(), help='Set log level')
    parser.add_argument('appmodule', action='store', metavar='MODULE:OBJ', help='module and wsgi app in format - module:obj')
    args = parser.parse_args(args=args)
    args.ssl_options = None
    if args.ssl:
        args.ssl_options = dict(default_ssl_options)
        for argname in ('certfile', 'keyfile'):
            filehandle = getattr(args, argname)
            if filehandle:
                 setattr(args, argname, filehandle.name)
                 filehandle.close()
                 args.ssl_options[argname] = path.realpath(getattr(args, argname))
    return args

if __name__ == '__main__':
    sys.exit(main())
